import oneflow.experimental as flow
import oneflow.experimental.nn as nn
from oneflow.python.nn.modules.instancenorm import InstanceNorm2d
import networks
import itertools
from image import ImagePool, ndarray2image
import numpy as np
import cv2

class CycleGANModel:

    def __init__(self, opt):
        self.opt = opt
        self.device = "cuda"
        self.netG_A = networks.ResnetGenerator(3, 3, n_blocks=opt.n_blocks).to(self.device)#, opt.ngf, opt.norm, opt.dropout, opt.n_blocks)
        self.netG_B = networks.ResnetGenerator(3, 3, n_blocks=opt.n_blocks).to(self.device)#, opt.ngf, opt.norm, opt.dropout, opt.n_blocks)

        self.netD_A = networks.NLayerDiscriminator(3).to(self.device)#opt.ndf, opt.n_layers_D, opt.norm)
        self.netD_B = networks.NLayerDiscriminator(3).to(self.device) #opt.ndf, opt.n_layers_D, opt.norm)

        self.fake_A_pool = ImagePool(opt.pool_size)
        self.fake_B_pool = ImagePool(opt.pool_size)

        self.criterionGAN = networks.GANLoss('lsgan').to(self.device) # define GAN loss.
        self.criterionCycle = flow.nn.L1Loss()
        self.criterionIdt = flow.nn.L1Loss()
        # initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.
        self.optimizer_G = flow.optim.Adam(itertools.chain(self.netG_A.parameters(), self.netG_B.parameters()), lr=opt.lr, betas=(opt.beta1, opt.beta2))
        self.optimizer_D = flow.optim.Adam(itertools.chain(self.netD_A.parameters(), self.netD_B.parameters()), lr=opt.lr, betas=(opt.beta1, opt.beta2))
        self.optimizers = [self.optimizer_G, self.optimizer_D]
        self.schedulers = [flow.optim.lr_scheduler.CosineAnnealingLR(optimizer, steps=100, alpha=0.0) for optimizer in self.optimizers] 

    def update_learning_rate(self):
        """Update learning rates for all the networks; called at the end of every epoch"""
        old_lr = self.optimizers[0].param_groups[0]['lr']
        for scheduler in self.schedulers:
            scheduler.step()

        lr = self.optimizers[0].param_groups[0]['lr']
        print('learning rate %.7f -> %.7f' % (old_lr, lr))

    def set_requires_grad(self, nets, requires_grad=False):
        """Set requies_grad=Fasle for all the networks to avoid unnecessary computations
        Parameters:
            nets (network list)   -- a list of networks
            requires_grad (bool)  -- whether the networks require gradients or not
        """
        if not isinstance(nets, list):
            nets = [nets]
        for net in nets:
            if net is not None:
                for param in net.parameters():
                    param.requires_grad = requires_grad

    def set_input(self, image_A, image_B):
        """Unpack input data from the dataloader and perform necessary pre-processing steps.

        Parameters:
            input (dict): include the data itself and its metadata information.

        The option 'direction' can be used to swap domain A and domain B.
        """
        self.real_A = flow.Tensor(image_A).to(self.device)
        self.real_B = flow.Tensor(image_B).to(self.device)

    def forward(self):
        """Run forward pass; called by both functions <optimize_parameters> and <test>."""
        self.fake_B = self.netG_A(self.real_A)  # G_A(A)
        self.rec_A = self.netG_B(self.fake_B)   # G_B(G_A(A))
        self.fake_A = self.netG_B(self.real_B)  # G_B(B)
        self.rec_B = self.netG_A(self.fake_A)   # G_A(G_B(B))

    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator

        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator

        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)
        # Fake
        pred_fake = netD(fake.detach())
        loss_D_fake = self.criterionGAN(pred_fake, False)
        # Combined loss and calculate gradients
        #print("loss_D_real: %f loss_D_fake: %f" % (loss_D_real.numpy()[0], loss_D_fake.numpy()[0]))
        loss_D = (loss_D_real + loss_D_fake) * 0.5
        loss_D.backward()
        return loss_D

    def backward_D_A(self):
        """Calculate GAN loss for discriminator D_A"""
        fake_B = self.fake_B_pool.query(self.fake_B)
        self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B)

    def backward_D_B(self):
        """Calculate GAN loss for discriminator D_B"""
        fake_A = self.fake_A_pool.query(self.fake_A)
        self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A)

    def backward_G(self):
        """Calculate the loss for generators G_A and G_B"""
        lambda_idt = self.opt.lambda_identity
        lambda_A = self.opt.lambda_A
        lambda_B = self.opt.lambda_B
        # Identity loss
        if lambda_idt > 0:
            # G_A should be identity if real_B is fed: ||G_A(B) - B||
            self.idt_A = self.netG_A(self.real_B)
            self.loss_idt_A = self.criterionIdt(self.idt_A, self.real_B) * lambda_B * lambda_idt
            # G_B should be identity if real_A is fed: ||G_B(A) - A||
            self.idt_B = self.netG_B(self.real_A)
            self.loss_idt_B = self.criterionIdt(self.idt_B, self.real_A) * lambda_A * lambda_idt
        else:
            self.loss_idt_A = 0
            self.loss_idt_B = 0

        # GAN loss D_A(G_A(A))
        self.loss_G_A = self.criterionGAN(self.netD_A(self.fake_B), True)
        # GAN loss D_B(G_B(B))
        self.loss_G_B = self.criterionGAN(self.netD_B(self.fake_A), True)
        # Forward cycle loss || G_B(G_A(A)) - A||
        self.loss_cycle_A = self.criterionCycle(self.rec_A, self.real_A) * lambda_A
        # Backward cycle loss || G_A(G_B(B)) - B||
        self.loss_cycle_B = self.criterionCycle(self.rec_B, self.real_B) * lambda_B
        # combined loss and calculate gradients
        self.loss_G = self.loss_G_A + self.loss_G_B + self.loss_cycle_A + self.loss_cycle_B + self.loss_idt_A + self.loss_idt_B
        self.loss_G.backward()

    def optimize_parameters(self):
        """Calculate losses, gradients, and update network weights; called in every training iteration"""
        # forward
        self.forward()      # compute fake images and reconstruction images.
        # G_A and G_B
        #self.set_requires_grad([self.netD_A, self.netD_B], False)  # Ds require no gradients when optimizing Gs
        self.optimizer_G.zero_grad()  # set G_A and G_B's gradients to zero
        self.backward_G()             # calculate gradients for G_A and G_B
        self.optimizer_G.step()       # update G_A and G_B's weights
        # D_A and D_B
        #self.set_requires_grad([self.netD_A, self.netD_B], True)
        self.optimizer_D.zero_grad()   # set D_A and D_B's gradients to zero
        self.backward_D_A()      # calculate gradients for D_A
        self.backward_D_B()      # calculate graidents for D_B
        self.optimizer_D.step()  # update D_A and D_B's weights

    def save_result(self, path):
        imageA = ndarray2image(self.real_A.numpy())
        imageB = ndarray2image(self.real_B.numpy())
        
        image_fake_B = ndarray2image(self.fake_B.numpy())
        image_rec_A = ndarray2image(self.rec_A.numpy())

        image_fake_A = ndarray2image(self.fake_A.numpy())
        image_rec_B = ndarray2image(self.rec_B.numpy())

        result1 = np.concatenate((imageA, image_fake_B, image_rec_A), axis = 1)
        result2 = np.concatenate((imageB, image_fake_A, image_rec_B), axis = 1)
        result = np.concatenate((result1, result2), axis = 0)
        cv2.imwrite(path, result)

    def log_loss(self, epoch, iter):
        print("epoch: %d, iter: %d, d_loss: %f, g_loss: %f" % \
            (epoch, iter, self.loss_D_A.numpy()[0] + self.loss_D_B.numpy()[0], self.loss_G.numpy()[0]))
